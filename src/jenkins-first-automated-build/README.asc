=== Your First Automated Build with Jenkins

// tag::body[]
:current-folder: src/jenkins-first-automated-build

WARNING: Access the folder `{current-folder}` to execute the upcoming commands.

It's time to start your basic automation. Let a robot (Jenkins) do the dirty daily tasks for you so you can increase your productivity. By this time, you have enough information about how to install and understand initial plugins having the confidence to create your first job. Also, how to start a Jenkins server using a _docker-compose_ command. So this section will go directly to how to automate your first build.

.startup on the detached mode
[source,bash]
----
docker-compose up -d
----

.lock the terminal on Jenkins' output log
[source,bash]
----
docker-compose logs -f
----

Great! Now your server is up and running. Type your username and password to login to the server.

image::{current-folder}/images/jenkins-homepage.png[Jenkins' Homepage]

==== What is a job or a project?

Since from the beginning, the description of your configuration that Jenkins would execute was known as _job_. Nowadays this term is considered as deprecated by Jenkins documentation. The synonym or the best term is _project_.

According to the suggested installed plugins, Jenkins will provide six types of projects: *Freestyle project*, *Pipeline*, *Multi-configuration project*, *Folder*, *GitHub Organization*, *Multibranch Pipeline*. This automation example will use the *Freestyle project* to configure everything.

Access the Jenkins' home page and click on the link _New Item_. Define a name for your project or use one of the most creative ones, _Hello World_. Choose the _Freestyle Project_ and go to the next step, clicking _OK_.

image::{current-folder}/images/jenkins-create-project.png[Create a Jenkins' project]

NOTE: On your next automation, you will notice an extra project type: *Copy from*. This is a very useful option to copy the entire configuration from another project just changing the name. Start typing in this field to search for all the existing projects. Consequently, you just need to change the parts that you want to.

==== Project Configuration

The first look at a project configuration is a bit scary. There are lots of options to configure. But you only need a few of them to start. Gradually you will gain experience and understand the purpose of each option.

Using the most straightforward example as possible, let's check out a Maven project from GitHub and build it. It could also be a local Git server or a Subversion. There are only two steps to configure.

===== Source Code Management

This section let you configure the checkout from any SCM. Click the _Git_ option and paste this URL https://github.com/cyborgdeveloper/maven-web[https://github.com/cyborgdeveloper/maven-web] on the *Repository URL* field. Done! Jenkins will make a simple clone of this project.

image::{current-folder}/images/jenkins-build-scm.png[Jenkins' Build - Source Code Management]

===== Build

Now it's time to set Maven commands. Click the button *Add build step* and select the option *Invoke top-level Maven targets*.

image::{current-folder}/images/jenkins-maven-build-step.png[Jenkins' Build - Maven Step]

Type in this field the same _goals_ you used to type manually to build your Maven project. This example will clean and package the project. There is no need to type the command _mvn_ at the beginning, just the goals.

.Invoke top-level Maven targets: Goals
----
clean package
----

Now click on _Save_ to finish the configuration. Jenkins will redirect you to the initial page of your project.

To execute the project, click on *Build Now* link.

> *Crack!!* Houston we have a problem!!
-- Jenkins

As you may have noticed you got a red ball on your left. Your #1 build crashed! Don't worry, let's understand what happened. Knowing how to solve problems is the best skill that you can have. 

==== Console Output

Don't panic! Every build has a specific page showing everything that happened, just click on the build number link. It will be available the user that started the process, how much time it took and many others great information.

image::{current-folder}/images/jenkins-build-status.png[Jenkins' Project Build Status]

For now, the *Console Output* link is the best bet to understand what happened. It will show the output of the entire process.

image::{current-folder}/images/jenkins-console-output.png[Jenkins' Console Output]

.traces' highlights
----
Started by user Rodrigo Moutinho
Building in workspace /var/jenkins_home/workspace/Hello World

...[skipping log]

[Hello World] $ mvn clean package
FATAL: command execution failed

...[skipping log]

Build step 'Invoke top-level Maven targets' marked build as failure
Finished: FAILURE
----

Take a close look at the output. Jenkins didn't find the command _mvn_. But why?!

It seems that there isn't Maven installation available. Let's teach Jenkins how to find it. Access the top menu following this options: _Jenkins > Manage Jenkins > Global Tool Configuration_.

image::{current-folder}/images/jenkins-global-tool-configuration.png[Jenkins' Global Tool Configuration]

At this page, you will be able to teach Jenkins where to find the right tools. To simplify, let Jenkins install it automatically. Click on *Add Maven*, select the desired version giving it a name and _Save_ the configuration.

image::{current-folder}/images/jenkins-maven-setup.png[Jenkins' Maven Setup]

This automatic installation will store the _.m2_, the Maven repository folder, on the Jenkins' home directory downloading everything that your projects need.

==== Your First Build

If you try to rerun the project, you will still get the same error because it doesn't know about the new Maven installation yet.

Get back to the Jenkins' home page, click on _Hello World_ project and access the *Configure* link (the page from where you had started). Now you only need to change the Maven version of your build.

image::{current-folder}/images/jenkins-maven-version.png[Jenkins' Maven Version]

_Save_ and build the project again. Get a cup of coffee because the first time will take a while due to Maven initial downloads. Ok, not too long but it will take a minute or two.

image::{current-folder}/images/jenkins-build-success.png[Jenkins' Build Success]

*Congratulations!!* You just built your first Maven project in an automated way.

Last but not least, Jenkins has *Workspace concept*. Every project has it on Workspace to store their data isolating everything from other projects. You can check all the files obtained from Git in this example clicking on the *Workspace* link.

// end::body[]
