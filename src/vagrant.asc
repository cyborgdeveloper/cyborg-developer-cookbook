== Vagrant

=== Create a local server with a single command

How good would it be to create a whole operating system (OS) using lines of code? Wouldn't be surprising and super simple? This magic will happen by using https://vagrantup.com[Vagrant]. And to make things better, let's use https://git-scm.com/[GIT] to handle the generated code, and then, Shell Scripts to install Maven and Tomcat on the server like you would do with your application.

At the end of this section, every Java developer of your small team will be able to create a virtual machine with your software. And with a single command.

But before start creating our environment, let's understand how it works.

==== The Virtual Machine

For sure, you've already heard about https://www.virtualbox.org[VirtualBox] or https://www.parallels.com[Parallels] or https://www.vmware.com[VMware]. These are powerful tools that help us to create virtual machines. The common way to create these machines, most of the times, was following step by step wizards. Yeah, it wasn't productive so far! But virtualization is the best way to create this server configuration. So, how to deal with this?

Now Vagrant goes into action! Vagrant provides an easy workflow to help from developer to designer, using a declarative file to describe all necessary configuration, the `Vagrantfile`. Now we end the era of _it works on my machine!_

The default Vagrant provider is https://www.virtualbox.org[VirtualBox]. You'll need to install it if you haven't done yet. And then install the magic https://www.virtualbox.org[Vagrant]. I will not enter into details here because it's simple. Enter the links and download the package for your OS.

So, it's time to start the simplest configuration step. Open your Terminal or Prompt, depending on your OS. You may test your installations using the command `vagrant`. It will show a brief manual with all available commands. Create and access a folder called `mini-course`. This will be our root `Vagrantfile` folder. Now type the following command: `vagrant init hashicorp/precise64 --minimal`. It will generate the simplest version of `Vagrantfile`. You can check out many other boxes versions at https://app.vagrantup.com/boxes/search[Vagrant Cloud].

Now you have a Ubuntu Server configuration. If you want to see some deep details, remove the `--minimal` flag. You'll need to remove `Vagrantfile` before rerunning the command. It'll generate the same file but with a huge amount of commented out configurations. But we need to start, so let's do the basic.

After configuring the `Vagrantfile`, you can create the machine. Execute `vagrant up` and *it's done!* Yeah, in the end, you will have a virtual server avoiding all those manual steps. Fantastic!! It's important to know that, for the first time, we need to download the box. Boxes are the package format for Vagrant environments. So it'll depend on your internet connection to download around _320MB_, in this case.

The second time you need about one or two minutes to start your machine from scratch. If you have SSD, it will take less than 30 seconds. Wow!! How long did take you to create that old machine with manual steps? For sure automation is fantastic!!

There are few great commands that will help you to handle your virtualization. Using `vagrant` followed by:

* `status` -> to show the machine status
* `halt` -> to shut down your machine
* `destroy` -> as it says, to destroy your machine
* `up` -> to create or to turn on the machine
* `ssh` -> the greatest one, to easy access your machine using SSH

It's important to know that this default SSH access is insecure. It uses a public access key and user/password vagrant as default. So you can have high productivity but not ready for production. We're creating a development environment.

Type all these commands at the root `Vagrantfile` folder, unless you specify the machine ID. To show all your instances, execute `vagrant global-status` anywhere.

Good! Now it's time to learn how to provision and how to apply the concept of infrastructure as a code. It's an excellent way to take full control of all your configurations.

==== Dealing with Environment Changes

Great!! A virtual environment is ready. Now it's easy to put deployment processes into practice. An important thing before provisioning is to control all changes that were made. Thus, it will be easy to fix any mess during this process.

Let's use https://git-scm.com/[Git] to handle the version control. It's a simple installation if you haven't done it yet. You may use other types of version control like SVN, but we'll stick to Git to publish our final result at GitHub. By the way, it's a great moment to start learning Git if you haven't started yet.

Inside the folder `mini-course`, execute `git init`. Now the project is under Git control.

First, set your information:

----
git config user.name "Cyborg Develper"
git config user.email rcmoutinho@cyborgdeveloper.tech
----

Then commit our first step:

----
git add Vagrantfile
git commit -m 'initial configuration of Ubuntu Server'
----

Now we have to do some small configurations. First one, create a file called `.gitignore`. It handles the ignored files of your version control. So we don't want to consider the internal Vagrant configuration. Open this file and write `/.vagrant/`. Now our commits won't consider this hidden folder anymore.

----
git add .gitignore
git commit -m 'ignoring internal vagrant files'
----

And the second, a good one for Windows users, is to create a file called `.gitattributes`. Open this file and write the following content:

----
*       text=auto
*.ssh   text eol=lf
*.bat   text eol=crlf
----

This simple configuration will ensure that you won't have trouble with text or script files regardless of using Windows or Linux machines to commit your files to version control.

----
git add .gitattributes
git commit -m 'dealing with line endings on Linux and Windows'
----

Wow! We're ready! Let's start at provisioning. 

IMPORTANT: This course doesn't intend to solve all your delivery problems in a section of a book. Cyborg Developer initiative will guide and follow you on this journey. The purpose here is to help you to start now this process by showing simple examples.

Now you have to think about what is the necessary installation to your server. So, install Java, a server like Tomcat or JBoss, a database like PostgreSQL or MySQL. And many other things that are prerequisites to your project.

The most important thing now is to keep it simple! I took too long to start automating my projects because I always wanted to start with the best â€” the perfect installation with the perfect configuration. So I took a long time to deliver. Or even worse, I didn't deliver with automation and got stressed with all manual steps.

Let's start with the minimal. We need to see something working. We'll be happy with our first automation step. Believe me! And it's necessary to keep pushing us through the next level.

We need to install a basic scenario. So, follow these simple steps inside your `mini-course` folder.

* `vagrant up` -> to turn on your machine, if you didn't start yet.
* `vagrant ssh` -> to access the server.

Now you are inside your virtual environment. Let's practice the installations.

* `sudo apt-get update -y` -> to quick update some OS packages.
* `sudo apt-get install default-jdk -y` -> to install the default JDK.

At this point, we have java 1.6.0_41 installed (`java -version`). The `-y` flag will be necessary to our scripts. It avoids manual interventions during the process. Test both ways to understand better. And execute `exit` to return to your local machine.

Great! Vagrant allowed us to test steps that we only made in production mode or using other servers. Awesome! But if we destroy this machine using vagrant destroy and then re-create? Oh no!!! We need to install everything again. Not anymore! Let's configure the provisioning.

Create a file `provision.sh` and copy the instructions we did at the manual process. By default, the provisioning executes with root privileges. So, we can remove sudo.

----
apt-get update -y
apt-get install default-jdk -y
----

Now we need to tell Vagrant to use this file at the provisioning. It's pretty simple. Open the `Vagrantfile` and set this configuration under `vm.box`:

----
config.vm.provision "shell", path: "provision.sh"
----

Time to destroy our machine and create a new one. On three steps, we'll have a server with Java.

----
vagrant destroy
vagrant up
vagrant ssh
----

Wow!! Now if we check Java version we get same results comparing to our previous manual process. Time to commit changes on Git repository.

----
git add .
git commit -m 'provisioning initial OS update and install default JDK'
----

This is the simplest way I found to show you the power of virtualization. Using this process you can configure and automate your whole infrastructure.

Too much information? Don't worry. Every step will be available at https://github.com/cyborgdeveloper/mini-course[Cyborg Developer GitHub]. You'll understand how important it is to control each commit showing what the code does. Take a look at the https://github.com/cyborgdeveloper/mini-course/commits/master[commit's page].

Next and final step: configure an application and access it using our local machine.

==== Deploying an App

Until now, we learn how to build virtual machines in a secure way and provision only once our environment. Now it's time to learn the benefits of an automatic build tool.

Your delivery is the most important part. At the end of each day of work or a week coding a new feature, you will have to do the same tasks. Build and check your dependencies, if everything is running fine. Run many types of tests, from unit to integration tests. Or if you didn't start to test yet, maybe it's time to begin to do it. And finally, deploy your app on your client. Phew!

It's a stressing part of our job because we love coding. We don't want to stay late to fix the deployment due to simple issues. And the best way is to prevent all these common scenarios.

I'll pick up a simple HelloWorld web app to practice the build and deployment phase. So, we'll need only a simple Servlet Container like https://tomcat.apache.org/[Tomcat].

At this part, you may install the Application Server or Servlet Container that you use on your project like GlashFish, JBoss Wildfly, or many others available. Enjoy this part as much as you can to get the right configuration to your production server. At this point, you can make mistakes without stress. When the production time comes, you will be confident to deploy your app.

Access your virtual machine using `vagrant ssh` and practice with no fear. When you finish, set up the configuration on your `provision.sh` file. Next time you need, everything will be already set to any developer of your team. Let's add Tomcat provisioning.

----
apt-get install tomcat7 -y
----

And commit the changes.

----
git add provision.sh
git commit -m 'installing Tomcat servlet container for deployment'
----

We know that, by this provisioning, Tomcat is up and running. But how can we check this from our host machine?

Vagrant has a feature to forward IP and ports. In this case, we want to access localhost with same `8080` port like a local installation. So, add to `Vagrantfile` this configuration.

----
config.vm.network "forwarded_port", guest: 8080, host: 8080, id: "tomcat"
----

You could comment to explain this forwarded port. I like to put an ID to make this clear. So if you change the line location, the explanation goes with it.

When we make changes to `Vagrantfile` we need to reload the machine to apply it. Execute vagrant reload and take a look at the new forward port. Now you can check http://localhost:8080/[localhost:8080] and get the message _"It works!"_ from Tomcat 7 installation. Time to commit.

----
git add Vagrantfile
git commit -m 'Mapped port from the Host machine to access Tomcat default port'
----

Server settled, or in this case, Servlet Container. Let's understand the benefits of automatic build and how simple this can be.

Using tools like https://maven.apache.org/[Maven] will simplify your build process, dependency management, and provide excellent project information to guide best development practices. Also, you increase your productivity with testing reports, Javadoc generation, and many other benefits.

It's an option. You can use https://gradle.org/[Gradle] to do the same task. It's up to you. Use the tool that makes you feel more comfortable and confident. The important thing is to automate your daily tasks. This demo will use Maven to show you how.

Keeping a simple installation, let's add an `apt-get` instruction to our provisioning file.

----
apt-get install maven -y
----

These simple instructions made our provisioning to be idempotent. WHAT?!? No worries. It means that if you run the provisioning once or 100+ times, you'll get the same results. So instead of destroying and creating a new machine, you can provision again.

But how is it possible if Vagrant provision only happens when it creates the machine? Will I have to run `provision.sh` manually?

Nope! Keep calm and trust Vagrant. You can execute only the provisioning phase. Run `vagrant provision` and it's done. It'll check each installation and install Maven too.

Don't forget to commit! Yeah, you need to trace every step you make. Know everything is happening. And when something goes wrong at the provisioning, it will be easy to find and rollback.

----
git add provision.sh
git commit -m 'installing Maven to automate the build process'
----

There is a simple Maven web app at GitHub to simulate this deployment. You can direct https://github.com/cyborgdeveloper/maven-web/archive/master.zip[download] the `.zip` skipping git installation. Or install git and https://github.com/cyborgdeveloper/maven-web[clone] the project.

Let's get a more straightforward way. Download the `.zip` to the vagrant home directory, unzip and access the folder.

* `vagrant shh` -> login into the virtual machine;
* `cd /vagrant/` -> to access Vagrant synced folder;
* `wget https://github.com/cyborgdeveloper/maven-web/archive/master.zip` -> to download the app;
* `unzip master.zip` -> to unzip the project;
* `cd maven-web-master/` -> to access the unzipped folder.

I remember the time that I did all this deployment process getting the compiled version from my development servlet container. And then copying it manually to production, hoping it works â€” old very stressed time. With maven you can build anywhere you want. And it'll work.

Let's do the hard work to generate the `.war` file to deploy.

----
mvn package
----

Wow!! Only this!? It was fascinating when I did this for the first time. All those stressing processes of copying from development to production are gone. Fantastic!! Everything we need is at the `target` folder. Take a look at the brand new `.war` package.

As you see, the first shot takes a little longer. It's because maven is downloading all project dependencies mapped at `pom.xml`. And it's awesome! We set once and run everywhere.

NOTE: You can execute `mvn clean package` to force maven clean the `target` folder, and do everything from scratch, avoid old cached files.

Now we need to move the `.war` package to the Servlet Container. And, in this case, wait to Tomcat unpack it instead of restart. The provisioning code doesn't need `sudo` as a prefix.

----
cp /vagrant/maven-web-master/target/maven-web.war /var/lib/tomcat7/webapps/
----

That's it. Access http://localhost:8080/maven-web/[localhost:8080/maven-web] on your local browser and you'll get "Hello World" page. *Woohoo!* Commit time.

----
git add provision.sh
git commit -m 'download, package and deploy a simple maven app'
----

Two last things to go. First, you have noticed that we don't have an idempotent provision anymore. If you try `vagrant provision` you will see some inconsistencies downloading Maven app and extracting it. For now, it's okay. But we need to keep in mind to create idempotent environments. It'll avoid the necessity of creating the whole machine, only provision it again.

And second, Vagrant has another great feature that is the auto sync folder. Now you saw the project folder and the compiled package in your root `Vagrantfile` folder. Vagrant syncs changes from host to guest and vice-versa. But it's dangerous!! Imagine an accidental deletion on your guest machine that erases an important host folder.

Rsync is a great option to sync host to guest avoiding the opposite. So we can change anything we want in the virtual environment with no side effects. Let's keep using the same default folder.

----
config.vm.synced_folder ".", "/vagrant", type: "rsync"
----

Reload the machine (`vagrant reload`) and check the initial synchronization. But now if you need to replicate changes from host to guest you have to run `vagrant rsync`. Another option is to start the auto sync, `vagrant rsync-auto`. It's a listener that watch any file change.

Last commit:

----
git add Vagrantfile
git commit -m 'uses rsync to sync Vagrant folder from host to guest only'
----

We're done. An effortless way to reproduce your production environment on your local machine. Fork the https://github.com/cyborgdeveloper/mini-course[mini-course project] and start today to apply your scenario. Or clone and run on your local machine.

Understand and get used to doing this simple automation will help you to achieve your stress-free delivery.
