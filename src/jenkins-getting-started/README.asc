=== Getting Started with Jenkins

// tag::body[]
:current-folder: src/jenkins-getting-started

WARNING: Access the folder `{current-folder}` to execute the upcoming commands.

==== Installation

There are many ways to install Jenkins. You can use only Java, various types of package manager, Docker, or even directly in the cloud.

Next, you are going to see a brief example of a Java installation. But the main focus will be using Docker because this tool will help you with other automation too. So it's an excellent skill to improve and get used to using.

You can take a look at all the possible ways to install Jenkins on the https://jenkins.io/download/[download page].

===== Using Java

As a Java tool, Jenkins only needs Java 8 version pre-installed. Can be the JRE or the JDK. Oracle has a complete guide to install Java in any kind of Operating System, https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html[take a look].

On the https://jenkins.io/download/[download page], pick up the Generic Java Package (http://mirrors.jenkins.io/war-stable/latest/jenkins.war[direct download link from the latest version]). The package has around 70 MB. Open the terminal, access the download file location and execute:

[source,bash]
----
java -jar jenkins.war
----

That's it! Access http://localhost:8080/[localhost at port 8080] to see the Jenkins' setup page.

You can also add some parameters, like a different initialization port to avoid conflicts:

[source,bash]
----
java -jar jenkins.war --httpPort=8090
----

Every time you need Jenkins up and running you will need to execute this command. It blocks your current terminal window writing Jenkins' output log. Press kbd:[CTRL + C] to stop it.

===== Using Docker

At the time of this writing, Jenkins LTS (Long-term Support) version is `2.190.1`. To better understand your code details and also make it work regardless of the time you would be running it in the future, favor setting a version number of your image.

Now, the image hash from `2.190.1` and `lts` would be the same for docker. Take a look at the output of the command `docker image ls`.

----
REPOSITORY        TAG       IMAGE ID       CREATED        SIZE
jenkins/jenkins   2.190.1   5721a6cac43c   4 weeks ago    572MB
jenkins/jenkins   lts       5721a6cac43c   4 weeks ago    572MB
jenkins/jenkins   2.190     333a7d6d7a53   2 months ago   572MB
----

Using _bind mounts_, you will depend on the directory structure of your machine (the host machine). It's handy to take a closer look at all the managed files from the container's volume. For example, you can analyze how Jenkins deals with plugins, specific configuration, and much more.

.bind mount
[source,bash]
----
docker container run \
  --name jenkins-bind-mount-example \
  -p 8080:8080 \
  -p 50000:50000 \
  -v $(pwd)/jenkins_home:/var/jenkins_home \
  jenkins/jenkins:2.190.1
----

Notice that the newly created folder, `jenkins_home`, is being ignored from Git inside the `.gitignore` file. It's possible to create this file regardless of the folder level of your Git project. In this scenario, especially, is to isolate the configuration from each recipe. It's crucial to backup Jenkins' home directory, but committing to Git wouldn't be the best option to do it.

Using pure docker commands, you will need to create the named volume before trying to create the Jenkins' container.

.managed volumes
[source,bash]
----
docker volume create jenkins-home

docker container run \
  --name jenkins-managed-volume-example \
  -p 8080:8080 \
  -p 50000:50000 \
  -v jenkins-home:/var/jenkins_home \
  jenkins/jenkins:2.190.1
----

There are pros and cons of using bind mounts and managed volumes. You can check a detailed explanation on the https://docs.docker.com/storage/volumes/[documentation page].

The command `run` with lock the terminal outputting the Jenkins' log trace. Press kbd:[CTRL + C] to stop it. It will also end the process. To start it again, type the following command:

[source,bash]
----
docker container start <container_name>
----

Both `start` and `run` commands can be executed in detached mode, adding the flag `-d`. Check more about docker on the _Docker Section_ in this book.

.Windows References
****

`$(pwd)` is for Linux/Unix environments. On Windows environment, `${PDW}` does the same on Windows PowerShell.

The best way for a multi-type environment with developers using Windows and others using Mac or Linux is to use volumes. Following this approach will be easy to create the same configuration for any scenario.

****

===== Using docker-compose

With docker-compose, you will gain a lot of productivity by avoiding big commands. One of the best advantages is that now you can transform your configuration into code. Now, all the required configuration is located on the `docker-compose.yml` and you just need to type the following simple command:

[source,bash]
----
docker-compose up
----

You can add the same flag `-d` to execute on detached mode. But now you don't need to remember a long command to start the server.

There is also an alternative file configuration using the bind mount approach with docker-compose. You can use one of the settings in your project according to your needs. To test this configuration on the same folder, you will need to specify the docker-compose file that you want to use. Otherwise, the default would be select to execute the command.

[source,bash]
----
COMPOSE_FILE=docker-compose.example-bind-mount.yml docker-compose up
----

Note that both configurations have a network setting. It will allow configuring an isolated network to this scenario, if necessary.

In the end, if you want to get rid of containers, networks, and more, execute the following command:

[source,bash]
----
docker-compose down -v
----

In test scenarios, you may also want to remove the volume. Add the flag `-v` in the command to do it too. But be careful about other scenarios not to remove essential volumes.

.Windows References
****

On the compose configuration, instead of `$(pwd)`, it is used `./` to set the current folder level. In Windows environments, it works in a different way.

So in case you are testing the code in a Windows env, replace the `./` for `C:\path\to\the\book\project\src\section` to avoid any kind of noise, that at least for now, is not the point of the process here.

But again, using volumes will always guarantee that you have a universal configuration for any OS.

****

==== Startup Configuration

You may have noticed some commons parameters or every startup process of Jenkins. Here are some brief explanations:

* Port *8080*: The default Jenkins listening port.
* Port *50000*: JNLP port used to connect a slave agent.
* *jenkins-home*: Jenkins home directory. Considering a docker installation as an example, the volume will maintain the data even after the container has been stopped or deleted. Note that a folder named `jenkins_home` will be created at your local folder from where the command has been executed.

When accessing http://localhost:8080[localhost:8080] for the first time, you will need to provide an admin password to unlock Jenkins.

image::{current-folder}/images/unlock-jenkins.png[]

The output log will print the password, and this secret key will remain as the admin pass until you change it.

image::{current-folder}/images/startup-output-log.png[]

==== Suggested Plugins

One of the main things that put Jenkins as one of the top automation tools in the industry is the plugin flexibilities. Plugins create the perfect scenario to fulfill most of your needs or all of them. Knowing how to get the best of the initially recommended plugins will make all the difference in your automation journey.

Jenkins has an https://plugins.jenkins.io/[official site to search for plugins] where some key information is shown. 

* Minimum required version to install.
* Maintainers, the magicians behind the plugin. You can also be a maintainer fixing bugs, writing documentation and suggesting improvements.
* Dependencies, the reason for Jenkins success. Think of a big puzzle using other existing pieces to create a new feature.
* The changelog shows how active this plugin is on fixing bugs and being constantly updated.

The plugin page is the best place to understand how useful the plugin is. From how many installations it has per month, to notes warning that the plugin became obsolete at some point in your lifetime.

Be aware that the initial manual plugin selection will not show the full list but you will be able to add whichever you want using the Plugin Manager after the installation.

image::{current-folder}/images/customize-jenkins.png[]

For didactic reasons, let's cover the same topics used by _Suggested Plugins_ page following the same order as they are suggested. So you will feel confident enough looking at the plugin installation. At the moment of this installation, version 2.90.1, there are 20 recommendations.

image::{current-folder}/images/installing-jenkins-plugins.png[]

===== Organization and Administration
* *Folders*: Very useful depending on your project size allowing folder creation to better organize your jobs.
* *OWASP Markup Formatter*: Allow HTML content at text fields taking care of unsafe tags like scripts. The standard format is plain text. You can change this configuration at `_Manage Jenkins > Configure Global Security > Markup Formatter_`. The acronym OWASP means Open Web Application Security Project.

===== Build Features
* *Build Timeout*: Abort a build if it's taking too long to execute. On the job configuration page, check the option `_Abort the build if it's stuck_` at `_Build Environment_` section.
* *Credentials Binding*: An easy way to handle secrets on a job accessing them by an environment variable during the build.
* *Timestamper*: An option that `_add timestamps to the Console Output_` at the `_Build Environment_` section on a job configuration.
* *Workspace Cleanup*: Like the name says, enables a workspace cleanup before and/or after the build is done.

Other cool ones not suggested:

* *Rebuilder*: Useful to rebuild parameterized jobs filling with the previously used values.
* *SSH Agent*: Allows adding Secure Shell (SSH) credentials used on builds.
* *embeddable-build-status*: This is for the badge lovers. Creates a fixed URL exposing the latest job status with an embeddable build status icon.

===== Build Tools
This section is very flexible to unmark suggested plugins or mark new ones like _.NET_ or _NodeJS_ support according to your project needs.

* *Ant*: Adds Apache Ant support allowing to invoke Ant targets at `_Build_` section.
* *Gradle*: Adds Gradle support to Jenkins allowing the build to run Gradle scripts.

===== Build Analysis and Reporting
Nothing is marked as suggested but it is possible to configure http://checkstyle.sourceforge.net/[Checkstyle], http://cobertura.github.io/cobertura/[Cobertura], http://junit.org/[JUnit] and many other tools.

===== Pipelines and Continuous Delivery
* *Pipeline*: Orchestrate automation workflows regardless its complexity. Check the https://jenkins.io/doc/book/pipeline/[documentation] for more details.
* *GitHub Branch Source*: Import repositories from an organization or user and expect a `Jenkinsfile` in the root directory of the project or branch.
* *Pipeline: GitHub Groovy Libraries*: Allows Pipeline Groovy libraries to be loaded on the fly from GitHub.
* *Pipeline: Stage View*: A pretty view to see the progress of each stage.

Another useful plugin not suggested is *Copy Artifact*. It enables a build step to copy an artifact from other projects (jobs).

===== Source Code Management
This section basically handles the checkout of your project from various Source Control Management (SCM) like Bitbucket, GitHub, GitLab, and even the old CVS. Jenkins suggests only *Git* and *Apache Subversion* initially.

===== Distributed Builds
This is a more advanced section when the basics of Jenkins is not enough to your project. *SSH Slaves* is suggested to access a slave using SSH with Java implementation. And an even more specific that is not suggested is the *Windows Slaves* that allows connecting to Windows machines.

===== User Management and Security
* *Matrix Authorization Strategy*: Enables a deep security level control to the Jenkins administrator of each available task. Allows enabling, disabling, and configuring key features of Jenkins.
* *PAM Authentication*: Adds the Pluggable Authentication Module (PAM) support. _"It is a mechanism to integrate multiple low-level authentication schemes into a high-level application programming interface (API)" - https://en.wikipedia.org/wiki/Pluggable_authentication_module[(Wikipedia)]_.
* *LDAP*: Adds the Lightweight Directory Access Protocol (LDAP) support, a standard application protocol for accessing directories over the Internet.

Another great plugin not suggested is *Role-based Authorization Strategy*. It is very useful for companies that handle the access by levels of roles.

===== Notifications and Publishing
*Email Extension* and *Mailer* improve in many aspects Jenkins email notification like customizing triggers and body mail content.

The plugins *Publish Over SSH* and *SSH* are not suggested but they also help to copy files and to execute scripts over SSH protocol.

==== User Initial Configuration

After installing the initial plugins, Jenkins will ask for an admin user creation. You can continue with the default setup, but it is crucial to create users to manage Jenkins' tasks. Specific users will let the administrator define the right permissions to each user and also keep an activity log of each user too.

image::{current-folder}/images/jenkins-create-user.png[]

Don't think this configuration as a way to blame people. Use it as a way to know the person that did the action and learn with him/her. Or to help your peer to improve some detail in the process.

It is a continuous learning and improvement process. Use it in favor of your team to create an excellent environment.

==== Manage Plugins

If you want to look and improve your Jenkins plugins, access the _Plugin Manager_ using the menu `_Manage Jenkins > Manage Plugins_`. From there you will be able to update, install and check what is already installed. You will also notice that there are more than the twenty suggested plugins installed due to their required dependencies.

// end::body[]
